#! /usr/bin/env pdo-shell

## Copyright 2023 Intel Corporation
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

## Two shell variables are used:
##    data -- the directory where the contract objects are stored
##    path -- the directory where the PSH scripts are stored
##
## $ pdo-shell -s create.psh -m path <contract path>

set --conditional -s home -v .
set --conditional -s data -v .
set --conditional -s save -v .
set --conditional -s _bin_ -v ${home}/contracts/identity/scripts

script -f ${_bin_}/init.psh

set -s _owner_ -v user1
identity -n ${_owner_}

trap_error

## =================================================================
echo ${HEADER} create a signature authority for the policy agent test ${ENDC}
## =================================================================
set -s _sa_contract_ -v /tmp/signature_authority_pa.pdo

contract create -c identity_signature_authority --source ${contracts}/_identity_signature_authority -f ${_sa_contract_}
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to create the signature authority contract; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

signature_authority_contract initialize -w -f ${_sa_contract_} \
    --description "this is a test signature authority"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to initialize the signature authority contract; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

contract info -f ${_sa_contract_} -s _sa_contract_id_ --field contract-id

signature_authority_contract register_signing_context -w -f ${_sa_contract_} \
    -d "credential context" --fixed -p "credential"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to save signing context test1 ${ENDC}
   exit -v ${_error_code_}
fi

signature_authority_contract register_signing_context -w -f ${_sa_contract_} \
    -d "test_credential context" --extensible -p "credential" "test_credential"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to save signing context test1 ${ENDC}
   exit -v ${_error_code_}
fi

signature_authority_contract get_extended_verifying_key -f ${_sa_contract_} -s _extended_key_ -p "credential"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to fetch extended verifying key for <credential>; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

parse -e ${_extended_key_} -p public_key -s _sa_public_key_
parse -e ${_extended_key_} --raw -p chain_code -s _sa_chain_code_

echo signature authority public key: ${_sa_public_key_}
echo signature authority chain code: ${_sa_chain_code_}

## =================================================================
echo ${HEADER} create a simple signed credential ${ENDC}
## =================================================================
set -s _credential1_ -f ${_path_}/../credential1.json

signature_authority_contract sign_credential -f ${_sa_contract_} -c ${_credential1_} \
    -p "credential" "test_credential" "test_issuer" -s _signed_credential1_
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to sign credential ${ENDC}
   exit -v ${_error_code_}
fi

echo ${INFO} Signed Credential: ${ENDC}
echo ${_signed_credential1_}

signature_authority_contract verify_credential -f ${_sa_contract_} -c ${_signed_credential1_} -s _result_
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to verify the credential; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

if --not -e ${_result_} "true"
   echo ${ERROR} [Error] credential verification failed ${ENDC}
   exit -v 1
fi

## =================================================================
echo ${HEADER} create the policy agent contract ${ENDC}
## =================================================================

set -s _pa_contract_ -v /tmp/policy_agent.pdo

contract create -c identity_policy_agent --source ${contracts}/_identity_policy_agent -f ${_pa_contract_}
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to create the policy agent contract ${ENDC}
   exit -v ${_error_code_}
fi

policy_agent_contract initialize -w -f ${_pa_contract_} \
    --description "this is a test policy agent"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to initialize the policy agent contract ${ENDC}
   exit -v ${_error_code_}
fi

policy_agent_contract register_signing_context -w -f ${_sa_contract_} \
    -d "issuer context" --fixed -p "policy_issuer"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to save signing context issuer ${ENDC}
   exit -v ${_error_code_}
fi

echo ${INFO} register the signature authority as a trusted endpoint ${ENDC}
policy_agent_contract register_trusted_issuer -w -f ${_pa_contract_} \
    --chaincode "${_sa_chain_code_}" --key "${_sa_public_key_}" --issuer "${_sa_contract_id_}" -p "credential"
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to register the issuer; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

echo ${INFO} issue the policy credential ${ENDC}
policy_agent_contract issue_policy_credential -f ${_pa_contract_} \
    -c ${_signed_credential1_} -s _issued_credential_
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to issue the signed credential; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi

echo ${INFO} Issued Credential: ${ENDC}
echo ${_issued_credential_}

echo ${INFO} verify the signature on the issued credential ${ENDC}
policy_agent_contract verify_credential -f ${_pa_contract_} -c ${_issued_credential_} -s _result_
if -o ${_error_code_} 0
   echo ${ERROR} [Error ${_error_code_}] failed to verify the issued credential; ${_error_message_} ${ENDC}
   exit -v ${_error_code_}
fi
if --not -e ${_result_} "true"
   echo ${ERROR} [Error] issued credential verification failed ${ENDC}
   exit -v 1
fi

echo ${INFO} credential successfully verified ${ENDC}

exit
