/* Copyright 2023 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <string>
#include <stddef.h>
#include <stdint.h>

#include "Dispatch.h"

#include "KeyValue.h"
#include "Environment.h"
#include "Message.h"
#include "Response.h"
#include "Types.h"
#include "Util.h"
#include "Value.h"
#include "WasmExtensions.h"

#include "contract/base.h"
#include "identity/committee.h"
#include "identity/identity.h"
#include "identity/signature_authority.h"
#include "identity/policy_agent.h"

// -----------------------------------------------------------------
// METHOD: initialize_contract
//   contract initialization method
//
// JSON PARAMETERS:
//   none
//
// RETURNS:
//   true if successfully initialized
// -----------------------------------------------------------------
bool initialize_contract(const Environment& env, Response& rsp)
{
    // ---------- initialize the base contract ----------
    ASSERT_SUCCESS(rsp, ww::identity::committee::initialize_contract(env),
                   "unexpected error: failed to initialize the contract");

    return rsp.success(true);
}

// -----------------------------------------------------------------
// committee_vote_function
//
// This function is used to determine the status of a resolution based
// on the votes received from the committee members. It checks if the
// resolution is pending and then counts the votes to determine if
// it should be approved or disapproved based on a majority rule.
//
// NOTE: this assumes that the committee membership is static during
// the lifespan of the resolution. If the committee membership changes,
// the resolution status must be set to expired.
// -----------------------------------------------------------------
bool ww::identity::committee::committee_vote_function(
    const ww::identity::Committee& committee,
    ww::identity::Resolution& resolution)
{
    if (resolution.status_ == ww::identity::ResolutionStatus::PENDING) {
        std::vector<std::string> members;
        ERROR_IF_NOT(committee.get_members(members),
                     "unexpected error: failed to get committee members");

        const size_t committee_size = members.size();
        ERROR_IF(committee_size == 0, "unexpected error: committee has no members");

        const size_t required_votes = committee_size / 2 + 1; // Majority rule

        if (required_votes <= resolution.positive_votes_.size())
            resolution.status_ = ww::identity::ResolutionStatus::APPROVED;
        else if ((committee_size - required_votes) < resolution.negative_votes_.size())
            resolution.status_ = ww::identity::ResolutionStatus::REJECTED;
    }

    return true;
}

// -----------------------------------------------------------------
// -----------------------------------------------------------------
contract_method_reference_t contract_method_dispatch_table[] = {
    CONTRACT_METHOD2(initialize, ww::identity::identity::initialize),

    CONTRACT_METHOD2(get_verifying_key, ww::identity::identity::get_verifying_key),
    CONTRACT_METHOD2(get_extended_verifying_key, ww::identity::identity::get_extended_verifying_key),

    // The primary contract methods for the identity committee
    CONTRACT_METHOD2(initialize_committee, ww::identity::committee::initialize_committee),
    CONTRACT_METHOD2(add_member, ww::identity::committee::add_member),
    CONTRACT_METHOD2(remove_member, ww::identity::committee::remove_member),

    CONTRACT_METHOD2(propose_resolution, ww::identity::committee::propose_resolution),
    CONTRACT_METHOD2(approve_resolution, ww::identity::committee::approve_resolution),
    CONTRACT_METHOD2(disapprove_resolution, ww::identity::committee::disapprove_resolution),

    CONTRACT_METHOD2(list_resolutions, ww::identity::committee::list_resolutions),
    CONTRACT_METHOD2(resolution_status, ww::identity::committee::resolution_status),

    CONTRACT_METHOD2(issue_resolution_credential, ww::identity::committee::issue_resolution_credential),

    // This is used to verify credentials that are generated by the policy agent
    CONTRACT_METHOD2(verify_credential, ww::identity::signature_authority::verify_credential),

    { NULL, NULL }
};
