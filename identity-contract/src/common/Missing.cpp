/* Copyright 2023 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stddef.h>
#include <openssl/crypto.h>

#include "Cryptography.h"
#include "WasmExtensions.h"

// This file contains the definition of functions that are not
// available in the WASI libc but required for openssl.

extern "C" char* getenv(const char* name)
{
    return NULL;
}

// openssl > 3.00.0 requires atexit to be defined unless
// you specifically initialize the library with OPENSSL_init_crypto
extern "C" int atexit(void (*function)(void))
{
    return 0;
}

// this is a weird way of replacing getuid, getgid, getegid, getpid
// for the WASM implementations of SSL; see the openssl-wasm github
// repository for more details
extern "C" int getpagesize(void)
{
    return 4096;
}

extern "C" void arc4random_buf(void* buffer, size_t size)
{
    ::random_identifier(size, (uint8_t*)buffer);
}

// -----------------------------------------------------------------
// OpenSSL requires qsort. This code was generated by Gemini
// using this prompt:
//
// Create a function that uses the quicksort algorithm to sort
// a list of iteams. the function should have the following signature:
// qsort(void *base, size_t nmemb, size_t size,int (*compar)(const void*, const void*))
// The function should sort the nmemb items of size size pointed to by base.
// The compar function should return an integer less than, equal to, or greater
// than zero if the first argument is considered to be respectively less than,
// equal to, or greater than the second. The compar function should have the
// following signature: int compar(const void *a, const void *b)
// The compar function should be called with two pointers to the items to be
// compared.
//
// -----------------------------------------------------------------
static void swap(void *a, void *b, size_t size)
{
    char temp;
    for (size_t i = 0; i < size; i++) {
        temp = ((char *)a)[i];
        ((char *)a)[i] = ((char *)b)[i];
        ((char *)b)[i] = temp;
    }
}

extern "C" void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))
{
    if (nmemb <= 1) return;

    // Choose the pivot as the middle element
    char *pivot = (char *)base + (size * (nmemb / 2));

    // Partition the array
    char *i = (char *)base - size;
    char *j = (char *)base + size * nmemb;
    while (i < j) {
        do {
            i += size;
        } while (compar(i, pivot) < 0);

        do {
            j -= size;
        } while (compar(j, pivot) > 0);

        if (i < j) {
            swap(i, j, size);
        }
    }

    // Place pivot in the correct position
    if (compar(i, pivot) > 0) {
        swap(i, pivot, size);
    }

    // Recursively sort partitions
    qsort(base, (size_t)(i - (char *)base) / size, size, compar);
    qsort(i + size, (size_t)(j - i) / size, size, compar);
}

// -----------------------------------------------------------------
// other functions that show up in the openssl crypto library; many
// of these should have been eliminated by the openssl configuration
// that is used to build the library
// -----------------------------------------------------------------

extern "C" int closedir(void *dir)
{
    CONTRACT_SAFE_LOG(4, "closedir not implemented");
    return -1;
}

extern "C" void *opendir(const char *name)
{
    CONTRACT_SAFE_LOG(4, "opendir not implemented");
    return NULL;
}

extern "C" void *readdir(void *dir)
{
    CONTRACT_SAFE_LOG(4, "readdir not implemented");
    return NULL;
}

extern "C" int stat(const char *path, void *buf)
{
    CONTRACT_SAFE_LOG(4, "stat not implemented");
    return -1;
}

extern "C" int fstat(int fd, void *buf)
{
    CONTRACT_SAFE_LOG(4, "fstat not implemented");
    return -1;
}

extern "C" int open(const char *path, int flags, ...)
{
    CONTRACT_SAFE_LOG(4, "open not implemented");
    return -1;
}

extern "C" int read(int fd, void *buf, size_t count)
{
    CONTRACT_SAFE_LOG(4, "read not implemented");
    return -1;
}

extern "C" int close(int fd)
{
    CONTRACT_SAFE_LOG(4, "close not implemented");
    return -1;
}

extern "C" char *strerror(int errnum)
{
    CONTRACT_SAFE_LOG(4, "strerror not implemented");
    return NULL;
}

extern "C" char *strrchr(const char *s, int c)
{
    CONTRACT_SAFE_LOG(4, "strrchr not implemented");
    return NULL;
}

extern "C" int getpid(void)
{
    CONTRACT_SAFE_LOG(4, "getpid not implemented");
    return -1;
}

extern "C" time_t time(time_t *tloc)
{
    CONTRACT_SAFE_LOG(4, "time not implemented");
    return -1;
}

extern "C" int __multi3(int a, int b)
{
    CONTRACT_SAFE_LOG(4, "__multi3 not implemented");
    return -1;
}

extern "C" int __ashlti3(int a, int b)
{
    CONTRACT_SAFE_LOG(4, "__ashlti3 not implemented");
    return -1;
}
